{"version":3,"sources":["features/posts/postsSlice.js","features/posts/posts.js","app/Reddit.js","features/comments/comments.js","features/posts/post.js","components/searchbar.js","components/subredditsSlice.js","images/reddit-logo.png","components/subreddits.js","images/defaultBanner.jpg","components/nav.js","app/App.js","app/store.js","serviceWorker.js","index.js"],"names":["PostsSlice","createSlice","name","initialState","posts","activePost","activePostComments","reducers","addPost","state","action","payload","forEach","obj","id","setActivePost","setActivePostComments","poster","comment","selectPosts","selectActivePost","selectActivePostComments","actions","postsReducer","reducer","dateCalculator","created","dateDifferenceInTime","Date","now","dateDifferenceInMonths","dateDifferenceInDays","dateDifferenceInHours","dateDifferenceInMinutes","Math","round","Posts","useSelector","dispatch","useDispatch","Object","values","map","post","to","className","onClick","title","src","url","alt","onError","e","target","style","display","content","upVotes","downVotes","timePosted","numComments","searchReddit","searchVal","a","fetch","response","ok","json","jsonResponse","data","children","author","downs","ups","num_comments","permalink","selftext","Error","console","log","fetchPostData","fetchSubReddits","subReddit","display_name_prefixed","icon","community_icon","split","banner","banner_img","Comments","comments","useEffect","yes","user","userComment","body","fetchFunction","Post","width","height","SearchBar","useState","setSearchVal","newPosts","myFunction","handleSubmit","placeholder","onChange","value","onKeyPress","key","handleKeyPress","subRedditSlice","subReddits","activeSubReddit","addSubReddit","setActiveSubReddit","selectSubReddits","selectActiveSubReddit","subRedditReducer","SubReddits","activeSub","helperFunction","subRedditsArr","sub","redditLogo","NavBar","defaultBanner","visibleNav","setVisibleNav","bannerUrl","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","changeBanner","App","path","exact","component","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed822fdc.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const PostsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState: {\r\n        posts: {},\r\n        activePost: {},\r\n        activePostComments: {}\r\n    },\r\n    reducers: {\r\n        addPost: (state, action) =>{//passed object {title, poster, timeposted,downVotes, upvotes id} from searchbar.js || passed array[{obj1}, {obj2},...]\r\n          state.posts = {}\r\n          action.payload.forEach(obj => {\r\n            //const {title, poster, timePosted, downVotes, upVotes, numComments, permalink, url, content id} = obj\r\n            state.posts[obj.id] = obj\r\n            //{\r\n            //     title,\r\n            //     poster,\r\n            //     timePosted,\r\n            //     downVotes,\r\n            //     upVotes,\r\n            //     numComments,\r\n            //     permalink,\r\n            //     url,\r\n            //     id\r\n            // }\r\n          })  \r\n        },\r\n        setActivePost: (state, action) => {//passed object {title, poster, timeposted,downVotes, upvotes id}\r\n          state.activePost = action.payload\r\n        },\r\n        setActivePostComments: (state, action) => {\r\n          state.activePostComments = {}\r\n          action.payload.forEach(obj => {\r\n            const {poster, comment, id} = obj\r\n            state.activePostComments[id] = {\r\n              poster,\r\n              comment,\r\n              id\r\n            }\r\n          })\r\n          }\r\n        }\r\n})\r\n\r\nexport const selectPosts = state=> state.posts.posts;\r\nexport const selectActivePost = state => state.posts.activePost;\r\nexport const selectActivePostComments = state => state.posts.activePostComments\r\nexport const { addPost, setActivePost, setActivePostComments } = PostsSlice.actions;\r\nexport const postsReducer =  PostsSlice.reducer","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { selectPosts, setActivePost } from \"./postsSlice\" \r\nimport './post.css'\r\n\r\nexport const dateCalculator = (created) => {\r\n  const currentDate = Date.now();\r\n  const postDate = new Date(created * 1000);\r\n\r\n  const dateDifferenceInTime = currentDate - postDate;\r\n\r\n  const dateDifferenceInMonths = dateDifferenceInTime / (1000 * 3600 * 24 * 30.4);\r\n  const dateDifferenceInDays = dateDifferenceInTime / (1000 * 3600 * 24);\r\n  const dateDifferenceInHours = dateDifferenceInTime / (1000 * 3600);\r\n  const dateDifferenceInMinutes = dateDifferenceInTime / (1000 * 60);\r\n\r\n  if (dateDifferenceInMonths > 12) {\r\n      return \"more than a year ago\";\r\n  } else if (dateDifferenceInMonths >= 1) {\r\n      return Math.round(dateDifferenceInMonths) + \" months ago\";\r\n  } else if (dateDifferenceInDays >= 1) {\r\n      return Math.round(dateDifferenceInDays) + \" days ago\";\r\n  } else if (dateDifferenceInHours >= 1) {\r\n      return Math.round(dateDifferenceInHours) + \" hours ago\";\r\n  } else if (dateDifferenceInMinutes >= 1) {\r\n      return Math.round(dateDifferenceInMinutes) + \" minutes ago\";\r\n  } else {\r\n      return \"less than a minute ago\";\r\n  }\r\n}\r\n\r\n export default function Posts() {\r\n  const posts = useSelector(selectPosts);\r\n  const dispatch = useDispatch();\r\n\r\n    return (\r\n      <section id='posts'>\r\n        {Object.values(posts).map((post) => (\r\n          <Link to='/post' \r\n          key={post.id} \r\n          className='postInPosts'\r\n          onClick={()=> dispatch(setActivePost(post))}\r\n          >\r\n            <div id='post'>\r\n                <h2 id='title'>{post.title}</h2>\r\n                <img \r\n                  src={post.url} \r\n                  alt=''\r\n                  onError={(e)=> e.target.style.display = 'none'}\r\n                />\r\n                <p>{post.content}</p>\r\n                <div className='postData'>\r\n                    <p className='data'>{post.upVotes - post.downVotes} upvotes</p>\r\n                    <p className='data'>{dateCalculator(post.timePosted)}</p>\r\n                    <p className='data'>{post.poster}</p>\r\n                    <p className='data'>{post.numComments} comments</p>\r\n                </div>\r\n            </div>\r\n          </Link>\r\n      ))}\r\n      </section>\r\n    )\r\n}","export const searchReddit = async (searchVal) => {\r\n  try{\r\n    const response = await fetch(`https://www.reddit.com/search.json?q=${searchVal}&type=link`);\r\n    if(response.ok){\r\n      const jsonResponse = await response.json();\r\n      //console.log(jsonResponse)\r\n      return jsonResponse.data.children.map(post => {\r\n        const data = post.data;\r\n        return {\r\n          title: data.title,\r\n          poster: data.author,\r\n          timePosted: data.created,\r\n          downVotes: data.downs,\r\n          upVotes: data.ups,\r\n          numComments: data.num_comments,\r\n          permalink: data.permalink,\r\n          url: data.url,\r\n          content: data.selftext,\r\n          id: data.id\r\n        };\r\n      });\r\n    }\r\n    throw new Error('Request Failed!')\r\n  } catch(error){\r\n    console.log(error)\r\n    return 'An error has occured. Please try again.'\r\n  }\r\n  \r\n}\r\n\r\nexport const fetchPostData = async (permalink)=>{\r\n  try{\r\n    const response = await fetch(`https://www.reddit.com${permalink}.json`);\r\n    if(response.ok){\r\n      const jsonResponse = await response.json();\r\n      //console.log(jsonResponse)\r\n      return jsonResponse;\r\n    }\r\n    throw new Error('Request Failed!')\r\n  } catch(error){\r\n    console.log(error)\r\n    return 'An Error has occured. Please try again.'\r\n  }\r\n}\r\n\r\nexport const fetchSubReddits = async () => {\r\n  try{\r\n    const response = await fetch(`https://www.reddit.com/subreddits.json?limit=10`)\r\n    if(response.ok){\r\n      const jsonResponse = await response.json();\r\n      //console.log(jsonResponse)\r\n      return jsonResponse.data.children.map(subReddit => {\r\n        const data = subReddit.data;\r\n        return{\r\n          name: data.display_name_prefixed,\r\n          url: data.url,\r\n          icon: data.community_icon.split('?')[0],\r\n          banner: data.banner_img,\r\n          id: data.id\r\n        }\r\n      })\r\n    }\r\n    throw new Error('Request Failed!');\r\n  } catch (error){\r\n    console.log(error)\r\n    return 'An error has occured. Please try again.'\r\n  }\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport { fetchPostData } from \"../../app/Reddit\"\r\nimport { selectActivePost, selectActivePostComments, setActivePostComments } from '../posts/postsSlice';\r\n\r\nexport default function Comments(){\r\n  const post = useSelector(selectActivePost)\r\n  const comments = useSelector(selectActivePostComments)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(()=>{\r\n    async function fetchFunction(){\r\n      const jsonResponse = await fetchPostData(post.permalink);\r\n      const yes = jsonResponse[1].data.children.map(user=>{\r\n        const userComment = user.data;\r\n        return {\r\n          poster: userComment.author,\r\n          comment: userComment.body,\r\n          id: userComment.id\r\n        }\r\n      })\r\n      dispatch(setActivePostComments(yes));\r\n    }\r\n\r\n    fetchFunction()\r\n  },[])\r\n  \r\n\r\n  return(\r\n    <section className='comments'>\r\n      {Object.values(comments).map(comment=>(\r\n        <div key={comment.id} className='comment'>\r\n          <p className='poster'>{comment.poster}</p>\r\n          <p className='content'>{comment.comment}</p>\r\n        </div>\r\n    ))}\r\n    </section>\r\n  )\r\n}","import { useSelector } from 'react-redux';\r\n//import { useEffect } from 'react';\r\n\r\nimport Comments from '../comments/comments'\r\nimport { selectActivePost } from '../posts/postsSlice';\r\nimport { dateCalculator } from './posts';\r\nimport './post.css';\r\n\r\n\r\nexport default function Post() {\r\n  const post = useSelector(selectActivePost);\r\n\r\n  return(\r\n    <div id='postWithComments'>\r\n      <div id='post'>\r\n        <h2 id='title'>{post.title}</h2>\r\n          <img \r\n          src={post.url} \r\n          alt=''\r\n          style={{width: '30%', height: '30%'}} \r\n          onError={(e)=> e.target.style.display = 'none'}\r\n        />\r\n          <p id='content'>{post.content}</p>\r\n          <div className='postData'>\r\n             <p className='data'>{post.upVotes - post.downVotes} upvotes</p>\r\n              <p className='data'>{dateCalculator(post.timePosted)}</p>\r\n              <p className='data'>{post.numComments}</p>\r\n          </div>\r\n      </div>\r\n      <Comments />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addPost } from '../features/posts/postsSlice';\r\nimport { searchReddit } from '../app/Reddit';\r\nimport { fetchPostData } from '../app/Reddit';\r\n\r\nimport './navbar.css'\r\n\r\nexport default function SearchBar(){\r\n  const [searchVal, setSearchVal] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  // const terms = ['halloween', 'candy', 'costumes', 'halloween decorations', 'haunted house'];\r\n  // const randomSearch = terms[Math.floor(Math.random() * terms.length)]\r\n\r\n  useEffect(()=>{\r\n      async function myFunction(){ \r\n        const jsonResponse = await fetchPostData('/r/Home');\r\n        const newPosts = jsonResponse.data.children.map(post => {\r\n          const data = post.data;\r\n          return {\r\n            title: data.title,\r\n            poster: data.author,\r\n            timePosted: data.created,\r\n            downVotes: data.downs,\r\n            upVotes: data.ups,\r\n            numComments: data.num_comments,\r\n            permalink: data.permalink,\r\n            url: data.url,\r\n            content: data.selftext,\r\n            id: data.id\r\n          }\r\n        })\r\n        dispatch(addPost(newPosts));\r\n    }\r\n    // async function fetchFunction(){\r\n    //   const data = await searchReddit(randomSearch);\r\n    //   dispatch(addPost(data));\r\n    //fetchFunction()\r\n    myFunction();\r\n  },[])\r\n\r\n  const handleSubmit = async () => {\r\n    const data = await searchReddit(searchVal)\r\n    dispatch(addPost(data))\r\n  }\r\n\r\n  const handleKeyPress = e => {\r\n    if(e.key === 'Enter'){\r\n      handleSubmit()\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className='searchBar'>\r\n      <input placeholder='Search' \r\n      onChange={(e) => setSearchVal(e.target.value)} \r\n      onKeyPress={(e) => handleKeyPress(e)}/>\r\n      <button className='searchButton' onClick={() => {handleSubmit()}}>Search</button>\r\n    </div>\r\n  )\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const subRedditSlice = createSlice({\r\n  name: 'subReddits',\r\n  initialState: {\r\n    subReddits: {},\r\n    activeSubReddit: '/r/Home'\r\n  },\r\n  reducers: {\r\n    addSubReddit: (state, action) => { \r\n      action.payload.forEach(obj=>{\r\n        const {name, url, icon, id} = obj\r\n        state.subReddits[id] = obj\r\n      })\r\n    },\r\n    setActiveSubReddit: (state, action) => {\r\n      state.activeSubReddit = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const selectSubReddits = state => state.subReddits.subReddits;\r\nexport const selectActiveSubReddit = state => state.subReddits.activeSubReddit;\r\nexport const { addSubReddit, setActiveSubReddit } = subRedditSlice.actions;\r\nexport const subRedditReducer = subRedditSlice.reducer","export default __webpack_public_path__ + \"static/media/reddit-logo.b31490f4.png\";","import { useSelector, useDispatch } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { setActiveSubReddit, selectSubReddits, selectActiveSubReddit, addSubReddit } from \"./subredditsSlice\";\r\nimport redditLogo from '../images/reddit-logo.png'\r\nimport { fetchSubReddits, fetchPostData } from \"../app/Reddit\";\r\nimport { useEffect } from \"react\";\r\nimport { addPost } from \"../features/posts/postsSlice\";\r\n\r\nimport './navbar.css'\r\n\r\n\r\n\r\nexport default function SubReddits() {\r\n  const subReddits = useSelector(selectSubReddits)\r\n  const activeSub = useSelector(selectActiveSubReddit)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(()=>{\r\n    async function myFunction(){\r\n      const subRedditsArr = await fetchSubReddits();\r\n      dispatch(addSubReddit(subRedditsArr))\r\n    }\r\n    myFunction()\r\n  },[])\r\n\r\n\r\n  async function helperFunction(url){\r\n    const jsonResponse = await fetchPostData(url)\r\n    return jsonResponse.data.children.map(post => {\r\n      const data = post.data;\r\n       return {\r\n        title: data.title,\r\n        poster: data.author,\r\n        timePosted: data.created,\r\n        downVotes: data.downs,\r\n        upVotes: data.ups,\r\n        numComments: data.num_comments,\r\n        permalink: data.permalink,\r\n        url: data.url,\r\n        content: data.selftext,\r\n        id: data.id\r\n      }\r\n    })\r\n  }\r\n\r\n  return(\r\n    <section id='subreddits'>\r\n      <ul>\r\n        {Object.values(subReddits).map(sub=> (\r\n          <li key={sub.id} className={sub.url === activeSub.url ? 'activeSub' : 'undefined'}>\r\n            <Link \r\n            to='/' \r\n            className='sub'\r\n            onClick={()=>{\r\n              async function myFunction(){\r\n                dispatch(setActiveSubReddit(sub));  \r\n                const newPosts = await helperFunction(sub.url);\r\n                dispatch(addPost(newPosts));\r\n              }\r\n              myFunction()\r\n            }}>\r\n              <div>\r\n                <img \r\n                src={sub.icon} \r\n                alt=''\r\n                onError={(e)=> e.target.src = redditLogo}\r\n                />\r\n                <p className='subName'>{sub.name}</p>\r\n              </div>\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>  \r\n    </section>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/defaultBanner.0985782f.jpg\";","import SearchBar from './searchbar'\r\nimport SubReddits from './subreddits'\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport { selectActiveSubReddit } from './subredditsSlice'\r\n\r\nimport './navbar.css'\r\nimport banner from '../images/defaultBanner.jpg'\r\nimport { useState } from 'react'\r\n\r\nexport default function NavBar(){\r\n  const activeSub = useSelector(selectActiveSubReddit);\r\n  const defaultBanner = banner;\r\n  const [visibleNav, setVisibleNav] = useState(false)\r\n  \r\n  function changeBanner(activeSub){\r\n    let bannerUrl;\r\n    if(activeSub.banner){\r\n      bannerUrl = activeSub.banner;\r\n    } else {\r\n      bannerUrl = defaultBanner;\r\n    }\r\n    \r\n    return ({\r\n      backgroundImage: `url(${bannerUrl})`,\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center',\r\n      backgroundRepeat: 'no-repeat'\r\n    })\r\n  }\r\n\r\n  function handleClick(){\r\n    if(!visibleNav){\r\n      setVisibleNav(!visibleNav)\r\n    } else {\r\n      setVisibleNav(!visibleNav)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div id='navBar' style={changeBanner(activeSub)}>\r\n      <h1 className='title'>Reddit Mini</h1>\r\n      <SearchBar />\r\n\r\n      <div className='mobileNavBar' >\r\n        <button className='menuBtn' onClick={()=> handleClick()}>SubReddit's</button>\r\n        <div className={visibleNav ? 'navIsVisible' : 'navIsNotVisible'}>\r\n          <SubReddits />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='desktopNavBar'>\r\n        <SubReddits />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport '../App.css';\nimport Posts from '../features/posts/posts';\nimport Post from '../features/posts/post';\nimport NavBar from '../components/nav';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <NavBar />\n        <main>\n          <Switch>\n            <Route path=\"/\" exact component={Posts} />\n            <Route path='/post'component={Post} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  )  \n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { postsReducer } from '../features/posts/postsSlice';\nimport { subRedditReducer } from '../components/subredditsSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    subReddits: subRedditReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}